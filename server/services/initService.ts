import { databaseService } from "./databaseService";
import { sipService } from "./sipService";
import { voiceService } from "./voiceService";

export class InitService {
  static async initializeSystem(): Promise<void> {
    console.log("üöÄ Initializing VoiceBot System...");

    // Initialize database with sample data for testing
    await this.createSampleData();

    // Setup system monitoring
    this.startSystemMonitoring();

    console.log("‚úÖ VoiceBot System initialized successfully");
  }

  private static async createSampleData(): Promise<void> {
    try {
      // Create sample call logs for testing
      const sampleCalls = [
        {
          callId: "call-001",
          callerNumber: "+7-495-123-4567",
          startTime: new Date(Date.now() - 3600000), // 1 hour ago
          endTime: new Date(Date.now() - 3450000), // 2.5 minutes duration
          duration: 150,
          transcript: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –Ω–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä. –ú–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å?",
          intent: "technical_support",
          resolution: "Ticket created: IT-2024-001",
          ticketId: "IT-2024-001",
          status: "completed" as const,
        },
        {
          callId: "call-002",
          callerNumber: "+7-495-987-6543",
          startTime: new Date(Date.now() - 1800000), // 30 minutes ago
          endTime: new Date(Date.now() - 1620000), // 3 minutes duration
          duration: 180,
          transcript: "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º –≤ 3-–º –∫–∞–±–∏–Ω–µ—Ç–µ",
          intent: "hardware_issue",
          resolution: "Ticket created: IT-2024-002",
          ticketId: "IT-2024-002",
          status: "completed" as const,
        },
        {
          callId: "call-003",
          callerNumber: "+7-495-555-0123",
          startTime: new Date(Date.now() - 600000), // 10 minutes ago
          endTime: new Date(Date.now() - 480000), // 2 minutes duration
          duration: 120,
          transcript: "–ù—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –æ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏",
          intent: "password_reset",
          resolution: "Password reset instructions sent",
          status: "completed" as const,
        },
        {
          callId: "call-004",
          callerNumber: "+7-495-777-8899",
          startTime: new Date(),
          status: "active" as const,
        },
      ];

      for (const call of sampleCalls) {
        await databaseService.insertCallLog(call);
      }

      // Create initial system metrics
      await databaseService.insertMetrics({
        timestamp: new Date(),
        sipStatus: false,
        oneCStatus: false,
        voiceStatus: false,
        activeCalls: 1,
        totalCalls: 3,
        avgCallDuration: 150,
        recognitionAccuracy: 0.92,
      });

      console.log("üìä Sample data created for testing");
    } catch (error) {
      console.error("Error creating sample data:", error);
    }
  }

  private static startSystemMonitoring(): void {
    // Monitor system health every 30 seconds
    setInterval(async () => {
      try {
        const sipStatus = sipService.getStatus();
        const voiceStatus = voiceService.getStatus();

        await databaseService.insertMetrics({
          timestamp: new Date(),
          sipStatus: sipStatus.connected,
          oneCStatus: false, // Will be updated when 1C connects
          voiceStatus: voiceStatus.ttsReady && voiceStatus.sttReady,
          activeCalls: sipStatus.activeCalls,
          totalCalls: 0, // Calculate from logs
          avgCallDuration: 0, // Calculate from logs
          recognitionAccuracy: voiceStatus.accuracy,
        });
      } catch (error) {
        console.error("Error in system monitoring:", error);
      }
    }, 30000);
  }

  static async simulateIncomingCall(): Promise<void> {
    const callerNumbers = [
      "+7-495-123-4567",
      "+7-495-987-6543",
      "+7-495-555-0123",
      "+7-495-777-8899",
      "+7-495-111-2233",
    ];

    const randomCaller =
      callerNumbers[Math.floor(Math.random() * callerNumbers.length)];

    sipService.simulateIncomingCall(randomCaller);

    // Simulate call ending after random duration (30s - 5min)
    const duration = Math.floor(Math.random() * 270) + 30;

    setTimeout(() => {
      sipService.endCall();
    }, duration * 1000);
  }

  static async createTestTicket(): Promise<void> {
    const sampleIssues = [
      {
        title: "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
        description: "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å —É—Ç—Ä–∞",
        priority: "high" as const,
        category: "–°–µ—Ä–≤–µ—Ä—ã",
        customerName: "–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á",
        customerPhone: "+7-495-123-4567",
      },
      {
        title: "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º",
        description: "–ü—Ä–∏–Ω—Ç–µ—Ä HP –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 301 –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        priority: "medium" as const,
        category: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
        customerName: "–°–º–∏—Ä–Ω–æ–≤–∞ –ê–Ω–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
        customerPhone: "+7-495-987-6543",
      },
      {
        title: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è",
        description: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–±—ã–ª –ø–∞—Ä–æ–ª—å –æ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã",
        priority: "low" as const,
        category: "–£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏",
        customerName: "–ö–æ–∑–ª–æ–≤ –ê–ª–µ–∫—Å–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á",
        customerPhone: "+7-495-555-0123",
      },
    ];

    const issue = sampleIssues[Math.floor(Math.random() * sampleIssues.length)];

    // In real implementation, this would create a 1C ticket
    console.log("üìã Test ticket would be created:", issue);
  }
}
